//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Steve Fontes

[[JAX-RS]]
== JAX-RS
When a microservice is written using jax-rs, som opentracing.io functions are handled automatically.

=== Automatically handle a Span extracted from an incoming request

Any method annotated @GET, @PUT, @POST, @DELETE, or @PATCH will have @Trace annotation implicitly added for microprofile.io applications.

In this case an attempt is made to use the configured Tracer to extract a Span from the arriving request headers. If a Span is extracted, it is used as the parent Span for the new Span that is created for the method. This allows a microprofile.io application to easily participate in distributed Span correlation.

=== Automatically inject a Span into outgoing requests

A request for a javax.ws.rs.client.Client will deliver a Client that is extended (decorated, has feature registered, ...) in some way so that when an outbound request is made with that Client, a new Span will be created that is inserted in the outbound request for propagation downstream. The new Span will be a child of the current Span if a current Span exists. The new Span will be finished when the outbound request is completed. This extends the capability for a microprofile.io application to participate in distributed Span correlation.
